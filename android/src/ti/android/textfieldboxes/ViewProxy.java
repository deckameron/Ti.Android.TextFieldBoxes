/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.textfieldboxes;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;
import android.graphics.Color;


// This proxy can be created by calling Textfieldboxes.createView({message: "hello world"})
@Kroll.proxy(creatableInModule=TextfieldboxesModule.class)
public class ViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;
	
	private TextFieldBoxesView textFieldBoxesView;

	// Constructor
	public ViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		textFieldBoxesView = new TextFieldBoxesView(this);
		return textFieldBoxesView;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
	}

	// Methods
	@Kroll.setProperty @Kroll.method
	public void setHintText(String hintText)
	{
		if(hintText instanceof String){
			textFieldBoxesView.textFieldBoxes.setLabelText(hintText);
		} else {
			Log.e(LCAT, "setHintText should receive only strings");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setTextColor(String textColor)
	{
		if(textColor instanceof String){
			textFieldBoxesView.extendedEditText.setTextColor(Color.parseColor(textColor));
		} else {
			Log.e(LCAT, "setTextColor should receive only color strings. Ex: \"#212121\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setCounterTextColor(String counterTextColor)
	{
		if(counterTextColor instanceof String){
			textFieldBoxesView.textFieldBoxes.setCounterTextColor(Color.parseColor(counterTextColor));
		} else {
			Log.e(LCAT, "setCounterTextColor should receive only color strings. Ex: \"#424242\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setErrorColor(String errorColor)
	{
		if(errorColor instanceof String){
			textFieldBoxesView.textFieldBoxes.setErrorColor(Color.parseColor(errorColor));
		} else {
			Log.e(LCAT, "setErrorColor should receive only color strings. Ex: \"#F44336\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setPrimaryColor(String primaryColor)
	{
		if(primaryColor instanceof String){
			textFieldBoxesView.textFieldBoxes.setPrimaryColor(Color.parseColor(primaryColor));
		} else {
			Log.e(LCAT, "setPrimaryColor should receive only color strings. Ex: \"#673AB7\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setSecondaryColor(String secondaryColor)
	{
		if(secondaryColor instanceof String){
			textFieldBoxesView.textFieldBoxes.setSecondaryColor(Color.parseColor(secondaryColor));
		} else {
			Log.e(LCAT, "setSecondaryColor should receive only color strings. Ex: \"#B39DDB\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setPanelBackgroundColor(String panelBackgroundColor)
	{
		if(panelBackgroundColor instanceof String){
			textFieldBoxesView.textFieldBoxes.setPanelBackgroundColor(Color.parseColor(panelBackgroundColor));
		} else {
			Log.e(LCAT, "setPanelBackgroundColor should receive only color strings. Ex: \"#E0E0E0\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setHasClearButton(Boolean hasClearButton)
	{
		if(hasClearButton instanceof Boolean){
			textFieldBoxesView.textFieldBoxes.setHasClearButton(hasClearButton);
		} else {
			Log.e(LCAT, "setHasClearButton should receive only booleans");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setHelperText(String helperText)
	{
		if(helperText instanceof String){
			textFieldBoxesView.textFieldBoxes.setHelperText(helperText);
		} else {
			Log.e(LCAT, "setHelperText should receive only strings");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setMinCharacters(int minCharacters)
	{
		if(minCharacters == (int) minCharacters){
			textFieldBoxesView.textFieldBoxes.setMinCharacters(minCharacters);
		} else {
			Log.e(LCAT, "setMinCharacters should receive only int");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setMaxCharacters(int maxCharacters)
	{
		if(maxCharacters == (int) maxCharacters){
			textFieldBoxesView.textFieldBoxes.setMaxCharacters(maxCharacters);
		} else {
			Log.e(LCAT, "setMaxCharacters should receive only int");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setSuffixText(String suffixText)
	{
		if(suffixText instanceof String){
			textFieldBoxesView.extendedEditText.setSuffix(suffixText);
		} else {
			Log.e(LCAT, "setSuffixText should receive only string");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setSuffixTextColor(String suffixTextColor)
	{
		if(suffixTextColor instanceof String){
			textFieldBoxesView.extendedEditText.setSuffixTextColor(Color.parseColor(suffixTextColor));
		} else {
			Log.e(LCAT, "setSuffixTextColor should receive only color strings. Ex: \"#757575\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setPrefixText(String prefixText)
	{
		if(prefixText instanceof String){
			textFieldBoxesView.extendedEditText.setPrefix(prefixText);
		} else {
			Log.e(LCAT, "setPrefixText should receive only int");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setPrefixTextColor(String prefixTextColor)
	{
		if(prefixTextColor instanceof String){
			textFieldBoxesView.extendedEditText.setPrefixTextColor(Color.parseColor(prefixTextColor));
		} else {
			Log.e(LCAT, "setPrefixTextColor should receive only color strings. Ex: \"#757575\"");
		}
	}
	
	@Kroll.setProperty @Kroll.method
	public void setTheme(int theme)
	{
		textFieldBoxesView.setTheme(theme);
	}
	
	@Kroll.setProperty @Kroll.method
	public void setIconSignifier(String iconSignifier)
	{
		textFieldBoxesView.setIconSignifier(iconSignifier);
	}
	
	@Kroll.setProperty @Kroll.method
	public void setEndIcon(String endIcon)
	{
		textFieldBoxesView.setEndIcon(endIcon);
	}
}
